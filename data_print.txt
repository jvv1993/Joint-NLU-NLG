 self.p:  {'train': 32, 'valid': 0, 'test': 0, 'unsup_query': 0, 'unsup_parse': 0}
----------------------------------------------------------------------------------
self.data:  
{'ref-query': 'the vaults serves chinese and is for adults only . its prices are less than £20 .', 
'query': [5, 146, 34, 56, 12, 6, 50, 240, 188, 4, 92, 69, 70, 74, 43, 76, 4, 2], 
'ref-parse': 'name the vaults | food chinese | price_range less than £20 | family_friendly no', 
'parse': [5, 9, 95, 4, 6, 44, 4, 8, 34, 21, 33, 4, 10, 23, 2]}
--------------------------------------------------------------------------------------------------------------------
self.data:  [5, 146, 34, 56, 12, 6, 50, 240, 188, 4, 92, 69, 70, 74, 43, 76, 4, 2]
-------------------------------------------------------------------------------------------------------------------------

x_idx: (31x38 dim) [
[5, 146, 6, 7, 21, 22, 10, 39, 161, 8, 9, 5, 19, 41, 8, 26, 35, 38, 17, 15, 12, 32, 25, 27, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[119, 112, 46, 26, 7, 17, 15, 11, 63, 28, 11, 23, 85, 6, 66, 16, 12, 169, 10, 143, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[96, 62, 21, 22, 88, 5, 121, 10, 128, 118, 117, 73, 23, 104, 324, 50, 31, 257, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[305, 351, 211, 439, 150, 8, 5, 21, 22, 88, 19, 4, 84, 266, 31, 16, 8, 85, 106, 483, 451, 283, 186, 256, 12, 84, 134, 7, 40, 15, 4, 2, 0, 0, 0, 0, 0, 0],
[5, 177, 11, 62, 6, 7, 178, 12, 21, 79, 10, 5, 128, 118, 117, 12, 235, 37, 3, 180, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[101, 6, 7, 214, 104, 54, 20, 26, 32, 69, 4, 13, 6, 18, 292, 11, 5, 29, 30, 8, 10, 58, 136, 135, 72, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[123, 6, 35, 48, 21, 22, 26, 35, 38, 17, 15, 8, 71, 16, 12, 7, 32, 25, 27, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[157, 6, 7, 36, 33, 184, 14, 50, 76, 282, 281, 4, 13, 24, 7, 32, 17, 15, 12, 6, 18, 227, 5, 19, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[113, 6, 7, 54, 20, 10, 132, 131, 39, 4, 13, 24, 35, 38, 17, 15, 12, 6, 37, 57, 4, 69, 70, 74, 43, 186, 187, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[10, 5, 156, 6, 5, 67, 91, 4, 84, 319, 52, 14, 8, 308, 26, 32, 69, 4, 13, 6, 71, 16, 308, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[7, 46, 36, 9, 5, 19, 41, 33, 6, 64, 16, 6, 170, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[96, 62, 6, 7, 23, 104, 51, 46, 20, 4, 5, 38, 451, 50, 145, 20, 6, 244, 83, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[123, 33, 215, 7, 65, 28, 11, 23, 17, 15, 6, 7, 21, 22, 33, 73, 46, 59, 7, 68, 25, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[78, 6, 7, 42, 21, 22, 26, 40, 17, 102, 9, 5, 19, 41, 4, 13, 105, 66, 16, 308, 13, 225, 74, 43, 76, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[150, 9, 19, 6, 7, 21, 22, 33, 24, 7, 17, 15, 11, 65, 28, 11, 164, 13, 6, 9, 19, 12, 24, 7, 25, 27, 11, 115, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0],
[181, 106, 266, 10, 39, 90, 8, 302, 28, 5, 48, 36, 5, 171, 4, 5, 25, 27, 6, 369, 38, 50, 145, 41, 12, 780, 572, 58, 334, 243, 107, 4, 2, 0, 0, 0, 0, 0],
[80, 127, 51, 40, 6, 7, 21, 22, 10, 218, 9, 5, 19, 4, 92, 25, 27, 6, 74, 43, 76, 85, 37, 254, 50, 31, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[5, 67, 139, 6, 7, 21, 22, 26, 7, 25, 27, 11, 82, 261, 200, 413, 4, 24, 7, 17, 15, 11, 23, 28, 11, 164, 84, 182, 52, 14, 9, 5, 41, 11, 29, 30, 4, 2],
[5, 80, 127, 6, 7, 312, 21, 22, 9, 5, 29, 30, 10, 218, 26, 7, 23, 28, 11, 23, 17, 15, 12, 24, 7, 55, 25, 27, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0],
[5, 116, 112, 53, 14, 9, 19, 26, 7, 17, 15, 11, 63, 28, 11, 23, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[157, 6, 7, 36, 26, 7, 86, 104, 15, 12, 126, 278, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[5, 21, 22, 129, 10, 143, 24, 7, 17, 15, 11, 65, 28, 11, 23, 12, 184, 32, 44, 52, 14, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[5, 60, 61, 24, 7, 23, 28, 11, 23, 17, 15, 8, 6, 9, 5, 82, 43, 83, 25, 27, 12, 6, 18, 10, 132, 131, 39, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[123, 6, 35, 48, 21, 22, 26, 7, 40, 17, 15, 12, 69, 74, 43, 76, 4, 13, 6, 211, 57, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[113, 6, 7, 229, 56, 20, 10, 132, 131, 39, 4, 13, 24, 35, 38, 17, 15, 12, 6, 228, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[5, 67, 91, 6, 35, 38, 48, 20, 10, 39, 90, 9, 19, 4, 13, 6, 37, 57, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[142, 6, 7, 21, 22, 12, 13, 73, 42, 14, 4, 5, 17, 15, 6, 38, 12, 13, 6, 18, 9, 5, 29, 30, 12, 13, 6, 37, 31, 16, 4, 2, 0, 0, 0, 0, 0, 0],
[568, 431, 59, 101, 20, 50, 333, 339, 48, 109, 59, 242, 27, 69, 4, 106, 130, 197, 431, 304, 292, 29, 30, 88, 5, 3, 427, 166, 136, 135, 72, 4, 2, 0, 0, 0, 0, 0],
[26, 7, 17, 15, 11, 23, 28, 11, 23, 8, 5, 165, 6, 7, 57, 21, 22, 4, 168, 54, 14, 8, 13, 6, 18, 10, 5, 99, 100, 4, 2, 0, 0, 0, 0, 0, 0, 0],
[5, 67, 91, 73, 56, 14, 9, 7, 31, 16, 199, 26, 7, 40, 17, 15, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[5, 67, 139, 6, 7, 32, 27, 20, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[101, 6, 7, 276, 44, 86, 104, 46, 20, 10, 5, 29, 30, 12, 136, 135, 72, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(31,38 dim)
x_mask:  [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], 
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf]]
y_idx:  [[5, 9, 95, 4, 12, 19, 20, 4, 8, 22, 4, 7, 27, 4, 11, 16, 4, 13, 29, 109, 2, 0, 0, 0, 0, 0, 0, 0], [5, 78, 4, 6, 35, 4, 7, 39, 18, 17, 14, 4, 10, 15, 4, 13, 92, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 65, 48, 4, 12, 19, 20, 4, 6, 31, 4, 7, 14, 18, 17, 14, 4, 11, 16, 4, 10, 15, 4, 13, 74, 73, 75, 2], [5, 99, 4, 12, 19, 20, 4, 8, 34, 21, 33, 4, 7, 32, 4, 11, 16, 4, 10, 15, 2, 0, 0, 0, 0, 0, 0, 0], [5, 116, 17, 48, 4, 12, 19, 20, 4, 6, 30, 4, 11, 16, 4, 10, 23, 4, 13, 74, 73, 75, 2, 0, 0, 0, 0, 0], [5, 68, 4, 6, 36, 4, 8, 22, 4, 7, 43, 18, 17, 14, 4, 11, 16, 4, 13, 88, 87, 51, 2, 0, 0, 0, 0, 0], [5, 81, 4, 12, 19, 20, 4, 6, 31, 4, 8, 22, 4, 7, 27, 4, 10, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 108, 4, 12, 26, 4, 8, 45, 4, 7, 22, 4, 11, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 71, 4, 6, 36, 4, 8, 34, 21, 33, 4, 7, 27, 4, 10, 23, 4, 13, 84, 85, 29, 2, 0, 0, 0, 0, 0, 0], [5, 9, 49, 64, 4, 6, 30, 4, 8, 22, 4, 10, 15, 4, 13, 9, 105, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 113, 4, 12, 26, 4, 6, 35, 4, 11, 16, 4, 10, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 65, 48, 4, 6, 35, 4, 8, 40, 21, 41, 4, 7, 14, 18, 17, 14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 81, 4, 12, 19, 20, 4, 6, 35, 4, 8, 28, 4, 7, 43, 18, 17, 14, 4, 10, 23, 2, 0, 0, 0, 0, 0, 0], [5, 54, 4, 12, 19, 20, 4, 6, 38, 4, 8, 34, 21, 33, 4, 7, 32, 4, 11, 16, 4, 10, 23, 2, 0, 0, 0, 0], [5, 99, 4, 12, 19, 20, 4, 8, 45, 4, 7, 43, 18, 17, 14, 4, 11, 16, 4, 10, 15, 2, 0, 0, 0, 0, 0, 0], [5, 9, 114, 4, 12, 26, 4, 6, 31, 4, 8, 45, 4, 10, 15, 4, 13, 29, 57, 2, 0, 0, 0, 0, 0, 0, 0, 0], [5, 55, 82, 4, 12, 19, 20, 4, 8, 34, 21, 33, 4, 7, 32, 4, 11, 16, 4, 10, 23, 4, 13, 123, 2, 0, 0, 0], [5, 9, 49, 89, 4, 12, 19, 20, 4, 6, 30, 4, 8, 40, 21, 41, 4, 7, 14, 18, 17, 14, 4, 11, 24, 25, 2, 0], [5, 55, 82, 4, 12, 19, 20, 4, 8, 42, 4, 7, 14, 18, 17, 14, 4, 11, 24, 25, 4, 10, 23, 4, 13, 123, 2, 0], [5, 9, 72, 4, 6, 37, 4, 7, 39, 18, 17, 14, 4, 11, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 108, 4, 12, 26, 4, 8, 40, 21, 41, 4, 7, 32, 4, 11, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 86, 4, 12, 19, 20, 4, 6, 30, 4, 8, 22, 4, 7, 43, 18, 17, 14, 4, 13, 92, 2, 0, 0, 0, 0, 0, 0], [5, 9, 46, 47, 4, 8, 40, 21, 41, 4, 7, 14, 18, 17, 14, 4, 13, 84, 85, 29, 2, 0, 0, 0, 0, 0, 0, 0], [5, 81, 4, 12, 19, 20, 4, 6, 31, 4, 8, 34, 21, 33, 4, 7, 32, 4, 10, 23, 2, 0, 0, 0, 0, 0, 0, 0], [5, 71, 4, 6, 44, 4, 8, 22, 4, 7, 27, 4, 10, 15, 4, 13, 84, 85, 29, 2, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 49, 64, 4, 6, 31, 4, 7, 27, 4, 11, 16, 4, 10, 23, 4, 13, 29, 57, 2, 0, 0, 0, 0, 0, 0, 0], [5, 93, 4, 12, 19, 20, 4, 6, 38, 4, 7, 27, 4, 11, 24, 25, 4, 10, 23, 2, 0, 0, 0, 0, 0, 0, 0, 0], [5, 68, 4, 6, 31, 4, 8, 28, 4, 7, 43, 18, 17, 14, 4, 11, 16, 4, 13, 88, 87, 51, 2, 0, 0, 0, 0, 0], [5, 9, 112, 4, 12, 19, 20, 4, 6, 36, 4, 7, 14, 18, 17, 14, 4, 10, 15, 4, 13, 9, 66, 67, 2, 0, 0, 0], [5, 9, 49, 64, 4, 6, 44, 4, 7, 32, 4, 10, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 9, 49, 89, 4, 12, 50, 4, 8, 22, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 68, 4, 6, 35, 4, 8, 34, 21, 33, 4, 7, 32, 4, 11, 16, 4, 13, 88, 87, 51, 2, 0, 0, 0, 0, 0, 0]]
---------------------------------------------------------------------------------------------------------------------------
y_mask:  [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -inf, -inf, -inf, -inf, -inf, -inf]]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
batch:  
{'word_idx': 
	{'query': 
		tensor([[  5, 146,   6,  ...,   0,   0,   0],
        		[119, 112,  46,  ...,   0,   0,   0],
        		[ 96,  62,  21,  ...,   0,   0,   0],
        				 ...,
        		[  5,  67,  91,  ...,   0,   0,   0],
       			[  5,  67, 139,  ...,   0,   0,   0],
        		[101,   6,   7,  ...,   0,   0,   0]], device='cuda:0'), 
	'parse': (31x28 dim) 
		tensor([[  5,   9,  95,   4,  12,  19,  20,   4,   8,  22,   4,   7,  27,   4, 11,  16,   4,  13,  29, 109,   2,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  78,   4,   6,  35,   4,   7,  39,  18,  17,  14,   4,  10,  15, 4,  13,  92,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
				[  5,  65,  48,   4,  12,  19,  20,   4,   6,  31,   4,   7,  14,  18, 17,  14,   4,  11,  16,   4,  10,  15,   4,  13,  74,  73,  75,   2],
        		[  5,  99,   4,  12,  19,  20,   4,   8,  34,  21,  33,   4,   7,  32, 4,  11,  16,   4,  10,  15,   2,   0,   0,   0,   0,   0,   0,   0],
        		[  5, 116,  17,  48,   4,  12,  19,  20,   4,   6,  30,   4,  11,  16, 4,  10,  23,   4,  13,  74,  73,  75,   2,   0,   0,   0,   0,   0],
        		[  5,  68,   4,   6,  36,   4,   8,  22,   4,   7,  43,  18,  17,  14, 4,  11,  16,   4,  13,  88,  87,  51,   2,   0,   0,   0,   0,   0],
        		[  5,  81,   4,  12,  19,  20,   4,   6,  31,   4,   8,  22,   4,   7, 27,   4,  10,  15,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5, 108,   4,  12,  26,   4,   8,  45,   4,   7,  22,   4,  11,  16, 2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  71,   4,   6,  36,   4,   8,  34,  21,  33,   4,   7,  27,   4, 10,  23,   4,  13,  84,  85,  29,   2,   0,   0,   0,   0,   0,   0],
        		[  5,   9,  49,  64,   4,   6,  30,   4,   8,  22,   4,  10,  15,   4, 13,   9, 105,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       		 	[  5, 113,   4,  12,  26,   4,   6,  35,   4,  11,  16,   4,  10,  15, 2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  65,  48,   4,   6,  35,   4,   8,  40,  21,  41,   4,   7,  14, 18,  17,  14,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  81,   4,  12,  19,  20,   4,   6,  35,   4,   8,  28,   4,   7, 43,  18,  17,  14,   4,  10,  23,   2,   0,   0,   0,   0,   0,   0],
        		[  5,  54,   4,  12,  19,  20,   4,   6,  38,   4,   8,  34,  21,  33, 4,   7,  32,   4,  11,  16,   4,  10,  23,   2,   0,   0,   0,   0],
        		[  5,  99,   4,  12,  19,  20,   4,   8,  45,   4,   7,  43,  18,  17, 14,   4,  11,  16,   4,  10,  15,   2,   0,   0,   0,   0,   0,   0],
        		[  5,   9, 114,   4,  12,  26,   4,   6,  31,   4,   8,  45,   4,  10, 15,   4,  13,  29,  57,   2,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  55,  82,   4,  12,  19,  20,   4,   8,  34,  21,  33,   4,   7, 32,   4,  11,  16,   4,  10,  23,   4,  13, 123,   2,   0,   0,   0],
        		[  5,   9,  49,  89,   4,  12,  19,  20,   4,   6,  30,   4,   8,  40, 21,  41,   4,   7,  14,  18,  17,  14,   4,  11,  24,  25,   2,   0],
        		[  5,  55,  82,   4,  12,  19,  20,   4,   8,  42,   4,   7,  14,  18, 17,  14,   4,  11,  24,  25,   4,  10,  23,   4,  13, 123,   2,   0],
        		[  5,   9,  72,   4,   6,  37,   4,   7,  39,  18,  17,  14,   4,  11, 16,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5, 108,   4,  12,  26,   4,   8,  40,  21,  41,   4,   7,  32,   4, 11,  16,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  86,   4,  12,  19,  20,   4,   6,  30,   4,   8,  22,   4,   7, 43,  18,  17,  14,   4,  13,  92,   2,   0,   0,   0,   0,   0,   0],
        		[  5,   9,  46,  47,   4,   8,  40,  21,  41,   4,   7,  14,  18,  17, 14,   4,  13,  84,  85,  29,   2,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  81,   4,  12,  19,  20,   4,   6,  31,   4,   8,  34,  21,  33, 4,   7,  32,   4,  10,  23,   2,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  71,   4,   6,  44,   4,   8,  22,   4,   7,  27,   4,  10,  15, 4,  13,  84,  85,  29,   2,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,   9,  49,  64,   4,   6,  31,   4,   7,  27,   4,  11,  16,   4, 10,  23,   4,  13,  29,  57,   2,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  93,   4,  12,  19,  20,   4,   6,  38,   4,   7,  27,   4,  11, 24,  25,   4,  10,  23,   2,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  68,   4,   6,  31,   4,   8,  28,   4,   7,  43,  18,  17,  14, 4,  11,  16,   4,  13,  88,  87,  51,   2,   0,   0,   0,   0,   0],
        		[  5,   9, 112,   4,  12,  19,  20,   4,   6,  36,   4,   7,  14,  18, 17,  14,   4,  10,  15,   4,  13,   9,  66,  67,   2,   0,   0,   0],
        		[  5,   9,  49,  64,   4,   6,  44,   4,   7,  32,   4,  10,  15,   2, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,   9,  49,  89,   4,  12,  50,   4,   8,  22,   2,   0,   0,   0, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        		[  5,  68,   4,   6,  35,   4,   8,  34,  21,  33,   4,   7,  32,   4, 11,  16,   4,  13,  88,  87,  51,   2,   0,   0,   0,   0,   0,   0]], device='cuda:0')}, 
	'sent_len': (2x32 dim)
		{'query': tensor([26, 22, 20, 32, 22, 27, 21, 26, 29, 25, 15, 21, 23, 27, 30, 33, 28, 38, 30, 18, 14, 23, 29, 23, 22, 20, 32, 33, 31, 18, 10, 19], device='cuda:0'),
		 'parse': tensor([21, 18, 28, 21, 23, 23, 19, 15, 22, 18, 15, 18, 22, 24, 22, 20, 25, 27, 27, 16, 17, 22, 21, 21, 20, 21, 20, 23, 25, 14, 11, 22], device='cuda:0')}, 
	'mask': {'query': tensor([[0., 0., 0.,  ..., -inf, -inf, -inf],
       				  [0., 0., 0.,  ..., -inf, -inf, -inf],
        			  [0., 0., 0.,  ..., -inf, -inf, -inf],
        			  ...,
        			  [0., 0., 0.,  ..., -inf, -inf, -inf],
        			  [0., 0., 0.,  ..., -inf, -inf, -inf],
        			  [0., 0., 0.,  ..., -inf, -inf, -inf]], device='cuda:0'), 
			(21x28 dim)
			'parse': tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf,-inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf,-inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
						 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf]], device='cuda:0')}, 
	'ref': {'query': 
				['the vaults is a coffee shop near café brazil , in the riverside area , with an average customer rating and high price range .', 
				'cotto provides fast-food with a customer rating of 1 out of 5 but is children friendly and found near ranch .', 
				'browns cambridge coffee shop on the river near crowne plaza hotel offers 5 star pasta for family dining .', 
				'i would nt recommend zizzi , the coffee shop on riverside . they re family friendly , but you usually spend around 20 euros and they have a low rating .', 
				'the taste of cambridge is a sushi and coffee place near the crowne plaza hotel and does not permit families .', 
				'alimentum is a three star french restaurant with high prices . it is located outside of the city centre , near to yippee noodle bar .', 
				'cocum is an italian coffee shop with an average customer rating , child friendly and a high price range .', 
				'clowns is a pub that sells food for £20 - £25 . it has a high customer rating and is located along the riverside .', 
				'strada is a french restaurant near rainbow vegetarian café . it has an average customer rating and is not family-friendly . prices are less than 20 pounds .', 
				'near the bakers is the golden curry . they do japanese food , though with high prices . it is child friendly though .', 
				'a fast-food pub in the riverside area that is kid friendly is giraffe .', 'browns cambridge is a 5 star rated fast-food restaurant . the average spend for this restaurant is over £30 .', 
				'cocum that received a 3 out of 5 customer rating is a coffee shop that offers fast-food at a moderate price .', 
				'fitzbillies is a indian coffee shop with low customer ratings in the riverside area . it s children friendly though it costs less than £20 .', 
				'zizzi in riverside is a coffee shop that has a customer rating of 3 out of 5. it is in riverside and has a price range of £20-25 .', 
				'if you re near café rouge , check out the italian pub the plough . the price range is about average for this area and feel free to bring your kids .', 
				'blue spice rated low is a coffee shop near avalon in the riverside . its price range is less than £20 but not suitable for family .', 
				'the golden palace is a coffee shop with a price range of more then 30 dollars . has a customer rating of 5 out of 5. they serve japanese food in the area of city centre .', 
				'the blue spice is a non-family-friendly coffee shop in the city centre near avalon with a 5 out of 5 customer rating and has a cheap price range .', 
				'the phoenix provides english food in riverside with a customer rating of 1 out of 5 .', 'clowns is a pub with a one star rating and expensive pricing .', 
				'the coffee shop wildwood near ranch has a customer rating of 3 out of 5 and sells high priced japanese food .', 
				'the rice boat has a 5 out of 5 customer rating , is in the more than £30 price range and is located near rainbow vegetarian café .', 
				'cocum is an italian coffee shop with a low customer rating and prices less than £20 . it is nt family-friendly .', 
				'strada is a children-friendly chinese restaurant near rainbow vegetarian café . it has an average customer rating and is high-priced .', 
				'the golden curry is an average italian restaurant near café rouge in riverside . it is not family-friendly .', 
				'aromi is a coffee shop and it offers indian food . the customer rating is average and it is located in the city centre and it is not family friendly .', 
				'join us at alimentum restaurant for some fine italian cuisine at mid range prices . you can find us right outside city centre on the lakeside across from yippee noodle bar .', 
				'with a customer rating of 5 out of 5 , the cricketers is a family-friendly coffee shop . offering french food , it is located near the portland arms .', 
				'the golden curry offers chinese food in a family friendly atmosphere with a low customer rating .', 
				'the golden palace is a high range restaurant .', 
				'alimentum is a well priced one star fast-food restaurant near the city centre and yippee noodle bar .'], 
			'parse': 
				['name the vaults | eat_type coffee shop | price_range high | customer_rating average | area riverside | near café brazil', 
				'name cotto | food fast-food | customer_rating 1 out of 5 | family_friendly yes | near ranch', 
				'name browns cambridge | eat_type coffee shop | food italian | customer_rating 5 out of 5 | area riverside | family_friendly yes | near crowne plaza hotel', 
				'name zizzi | eat_type coffee shop | price_range less than £20 | customer_rating low | area riverside | family_friendly yes', 
				'name taste of cambridge | eat_type coffee shop | food japanese | area riverside | family_friendly no | near crowne plaza hotel', 
				'name alimentum | food french | price_range high | customer_rating 3 out of 5 | area riverside | near yippee noodle bar', 
				'name cocum | eat_type coffee shop | food italian | price_range high | customer_rating average | family_friendly yes', 
				'name clowns | eat_type pub | price_range £20-25 | customer_rating high | area riverside', 
				'name strada | food french | price_range less than £20 | customer_rating average | family_friendly no | near rainbow vegetarian café', 
				'name the golden curry | food japanese | price_range high | family_friendly yes | near the bakers', 
				'name giraffe | eat_type pub | food fast-food | area riverside | family_friendly yes', 
				'name browns cambridge | food fast-food | price_range more than £30 | customer_rating 5 out of 5', 
				'name cocum | eat_type coffee shop | food fast-food | price_range moderate | customer_rating 3 out of 5 | family_friendly no', 
				'name fitzbillies | eat_type coffee shop | food indian | price_range less than £20 | customer_rating low | area riverside | family_friendly no', 
				'name zizzi | eat_type coffee shop | price_range £20-25 | customer_rating 3 out of 5 | area riverside | family_friendly yes', 
				'name the plough | eat_type pub | food italian | price_range £20-25 | family_friendly yes | near café rouge', 
				'name blue spice | eat_type coffee shop | price_range less than £20 | customer_rating low | area riverside | family_friendly no | near avalon', 
				'name the golden palace | eat_type coffee shop | food japanese | price_range more than £30 | customer_rating 5 out of 5 | area city centre', 
				'name blue spice | eat_type coffee shop | price_range cheap | customer_rating 5 out of 5 | area city centre | family_friendly no | near avalon', 
				'name the phoenix | food english | customer_rating 1 out of 5 | area riverside', 'name clowns | eat_type pub | price_range more than £30 | customer_rating low | area riverside', 
				'name wildwood | eat_type coffee shop | food japanese | price_range high | customer_rating 3 out of 5 | near ranch', 
				'name the rice boat | price_range more than £30 | customer_rating 5 out of 5 | near rainbow vegetarian café', 
				'name cocum | eat_type coffee shop | food italian | price_range less than £20 | customer_rating low | family_friendly no', 
				'name strada | food chinese | price_range high | customer_rating average | family_friendly yes | near rainbow vegetarian café', 
				'name the golden curry | food italian | customer_rating average | area riverside | family_friendly no | near café rouge', 
				'name aromi | eat_type coffee shop | food indian | customer_rating average | area city centre | family_friendly no', 
				'name alimentum | food italian | price_range moderate | customer_rating 3 out of 5 | area riverside | near yippee noodle bar', 
				'name the cricketers | eat_type coffee shop | food french | customer_rating 5 out of 5 | family_friendly yes | near the portland arms', 
				'name the golden curry | food chinese | customer_rating low | family_friendly yes', 'name the golden palace | eat_type restaurant | price_range high', 
				'name alimentum | food fast-food | price_range less than £20 | customer_rating low | area riverside | near yippee noodle bar']
			}, 
	'flag': {
			}, 
	'class':{'parse': 
				{'name': tensor([15, 23, 20,  5, 26, 13, 11, 19, 29, 10, 31, 20, 11, 16,  5,  3, 22, 28, 22, 33, 19,  7,  4, 11, 29, 10, 32, 13, 27, 10, 28, 13], device='cuda:0'), 
				 'eat_type': tensor([0, 3, 0, 0, 0, 3, 0, 2, 3, 3, 2, 3, 0, 0, 0, 2, 0, 0, 0, 3, 2, 0, 3, 0, 3, 3, 0, 3, 0, 3, 1, 3], device='cuda:0'), 
				 'food': tensor([7, 2, 5, 7, 3, 0, 5, 7, 0, 3, 2, 2, 2, 4, 7, 5, 7, 3, 7, 6, 7, 3, 7, 5, 1, 5, 4, 5, 0, 1, 7, 2], device='cuda:0'), 
				 'price_range': tensor([0, 6, 6, 3, 6, 0, 0, 2, 3, 0, 6, 5, 1, 3, 2, 2, 3, 5, 4, 6, 5, 0, 5, 3, 0, 6, 6, 1, 6, 6, 0, 3], device='cuda:0'), 
				 'customer_rating': tensor([3, 4, 2, 5, 6, 1, 3, 0, 3, 6, 6, 2, 1, 5, 1, 6, 5, 2, 2, 4, 5, 1, 2, 5, 3, 3, 3, 1, 2, 5, 6, 5], device='cuda:0'), 
				 'area': tensor([0, 2, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 1, 0, 2, 2, 2, 0], device='cuda:0'), 
				 'family_friendly': tensor([2, 1, 1, 1, 0, 2, 1, 2, 0, 1, 1, 2, 0, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 0, 1, 0, 0, 2, 1, 1, 2, 2], device='cuda:0'), 
				 'near': tensor([ 6,  7, 17, 19, 17,  8, 19, 19, 10, 13, 19, 19, 19, 19, 19,  2, 15, 19, 15, 19, 19,  7, 10, 19, 10,  2, 19,  8,  4, 19, 19,  8], device='cuda:0')
				}
			}, 
	'run_auto': 
			{
				'query': True, 'parse': True
			}
}